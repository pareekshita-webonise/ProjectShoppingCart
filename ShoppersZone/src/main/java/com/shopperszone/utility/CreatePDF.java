package com.shopperszone.utility;

public class CreatePDF 
{
	/*private static File fileName;
	//private static Calendar calendar ;
	private static Font font;
	
	private Order order;
	private User user;
	
	public CreatePDF() 
	{}
	
	public static String createReport()
	{
		FileOutputStream pdfFile;
		
		try 
		{
			fileName = new File("abc.pdf");
			pdfFile = new FileOutputStream(fileName);
			Rectangle rect=new Rectangle(PageSize.A4);
            rect.setBorderColor(BaseColor.BLUE);
            rect.setBorderWidth(6);
            rect.setBorder(Rectangle.BOX);
			Document document = new Document(rect);
			PdfWriter.getInstance(document, pdfFile);
			
			document.open();
			addMetaData(document);
			addData(document);
			document.close();
			System.out.println("File "+fileName+" created.");
			System.out.println("File Path "+fileName.getPath());
			System.out.println("File Path "+fileName.getAbsolutePath());
			pdfFile.close();
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		} 
		catch (DocumentException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		return fileName.getName();
	}
	
	// Insert data in document...
	private static void addData(Document document) throws DocumentException 
	{
		Paragraph preface = new Paragraph();
		font = FontFactory.getFont("Times New Roman", 22, Font.BOLD+Font.UNDERLINE, BaseColor.BLACK);
		Paragraph paragraph = new Paragraph();
		paragraph.setAlignment(Element.ALIGN_RIGHT);
		paragraph.setFont(font);
		paragraph.add("ShoppersZone");
		preface.add(paragraph);	
		
		
		paragraph = new Paragraph();
		paragraph.setAlignment(Element.ALIGN_CENTER);
		paragraph.setFont(font);
		addEmptyLine(preface, 2);
		paragraph.add("Your Order");
		preface.add(paragraph);		
		addEmptyLine(preface, 3);
		
		Paragraph paragraph1 = new Paragraph("Report generated by: ADMINISTRATOR, "+new Date().toString(), FontFactory.getFont("Times New Roman", 12, Font.BOLD, BaseColor.BLUE));
		paragraph1.setAlignment(Element.ALIGN_CENTER);
		preface.add(paragraph1);		
		addEmptyLine(preface, 2);		
		//preface.add(createInsertTable());
		addEmptyLine(preface, 13);
		Paragraph paragraph2 = new Paragraph("Please keep this pdf safe.", FontFactory.getFont("Times New Roman", 14, Font.BOLD, BaseColor.RED));
		paragraph2.setAlignment(Element.ALIGN_CENTER);
		preface.add(paragraph2);
		document.add(preface);
	}

	// Insert table in document...
	private static PdfPTable createInsertTable() 
	{
		StringBuffer owners = new StringBuffer("");
		String emailIDs[] = new String[6];
		PdfPTable table=new PdfPTable(2);
		table.getDefaultCell().setFixedHeight(30);
		table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		PdfPCell cell1 = new PdfPCell (new Paragraph ("Fingerprint Insertion Parameters"));
        cell1.setColspan (2);
        cell1.setHorizontalAlignment (Element.ALIGN_CENTER);
        cell1.setVerticalAlignment (Element.ALIGN_CENTER);
        cell1.setPadding (10.0f);
        cell1.setBackgroundColor (new BaseColor (140, 221, 8));
        
        emailIDs[0] = "akshay.mayekar@weboniselab.com";
        System.out.println(emailIDs);
        for(int i=0 ; i<1 ; i++)
        {
			System.out.println("Email ID : "+emailIDs[i]);
			owners.append(emailIDs[i]+"\n");
        }
        PdfPCell cell2 = new PdfPCell (new Paragraph (owners.toString()));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell1);
        addRow(table, "No of owners", Integer.toString(DatabaseInformation.getNumOwners()));
        table.addCell("Owner's Email Ids");
        table.addCell(cell2);
        addRow(table, "Database", DatabaseInformation.getDatabase());
        addRow(table, "Database/SID Name", DatabaseInformation.getSid());
        addRow(table, "User", DatabaseInformation.getDbUser());
        addRow(table, "Table", DatabaseInformation.getTable());
        addRow(table, "Inserted Watermark", DatabaseInformation.getWatermark());
        addRow(table, "Result", ((DatabaseInformation.isResult())?"Watermark successfully inserted":"Watermark could not be inserted"));

        table.setSpacingBefore(30.0f);       // Space Before table starts, like margin-top in CSS
        table.setSpacingAfter(30.0f);		
		return table;
	}
	
	// Insert table in document...
	private static PdfPTable createDetectTable(boolean insertFlag) 
	{
		PdfPTable table=new PdfPTable(2);
		table.getDefaultCell().setFixedHeight(30);
		table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		PdfPCell cell1 = new PdfPCell (new Paragraph ("Fingerprint Detection Parameters"));
	    cell1.setColspan (2);
	    cell1.setHorizontalAlignment (Element.ALIGN_CENTER);
	    cell1.setVerticalAlignment (Element.ALIGN_CENTER);
	    cell1.setPadding (10.0f);
	    cell1.setBackgroundColor (new BaseColor (140, 221, 8));
	     
        table.addCell(cell1);
        addRow(table, "No of owners", Integer.toString(DatabaseInformation.getNumOwners()));
        addRow(table, "Database", DatabaseInformation.getDatabase());
        addRow(table, "Database/SID Name", DatabaseInformation.getSid());
        addRow(table, "User", DatabaseInformation.getDbUser());
        addRow(table, "Table", DatabaseInformation.getTable());
        addRow(table, "Inserted Watermark", DatabaseInformation.getWatermark());
        addRow(table, "Detected Watermark", DatabaseInformation.getDetectedWatermark());
        addRow(table, "Result", ((DatabaseInformation.isResult())?"Watermark pattern matched":"Watermark pattern unrecognized"));
        addRow(table, "Match Count", Double.toString(DatabaseInformation.getMatchCount())+"%");

        table.setSpacingBefore(30.0f);       // Space Before table starts, like margin-top in CSS
        table.setSpacingAfter(30.0f);		
		return table;
	}
	
	private static void addRow(PdfPTable table, String str1, String str2)
	{
		table.addCell(str1);
		table.addCell(str2);
	}

	// Insert PDF information...
	private static void addMetaData(Document document) 
	{
		document.addTitle("ShoppersZone");
		document.addSubject("Order details");
		document.addCreator("iText PDF Auto Generator");
		document.addAuthor("ADMINISTRATOR");
		document.addCreationDate();
	}

	// Create a unique filename every time...
	private static String createFileName()
	{
		StringBuilder name = new StringBuilder("");
		calendar = Calendar.getInstance();
		name.append((calendar.get(Calendar.DATE)<10) ? "0"+calendar.get(Calendar.DATE) : calendar.get(Calendar.DATE));
		name.append((calendar.get(Calendar.MONTH)<10) ? "0"+calendar.get(Calendar.MONTH) : calendar.get(Calendar.MONTH));
		name.append(((calendar.get(Calendar.YEAR)%100)<10) ? "0"+(calendar.get(Calendar.YEAR)%100) : (calendar.get(Calendar.YEAR)%100));
		name.append((calendar.get(Calendar.HOUR)<10) ? "0"+calendar.get(Calendar.HOUR) : calendar.get(Calendar.HOUR));
		name.append((calendar.get(Calendar.MINUTE)<10) ? "0"+calendar.get(Calendar.MINUTE) : calendar.get(Calendar.MINUTE));
		name.append((calendar.get(Calendar.SECOND)<10) ? "0"+calendar.get(Calendar.SECOND) : calendar.get(Calendar.SECOND));		
		return name.toString(); 
	}
	
	// Insert empty lines in document...
	private static void addEmptyLine(Paragraph preface, int number) throws DocumentException 
	{
        for (int i = 0; i < number; i++) {
        	preface.add(new Paragraph(" "));
        }
   }

	public static void main(String[] args) 
	{
		System.out.println(CreatePDF.createReport());
		System.out.println("done");
	}*/

}